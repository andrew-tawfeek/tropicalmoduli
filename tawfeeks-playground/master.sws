#defining the graphs
#use https://stackoverflow.com/questions/62797267/plotting-non-injective-labels-on-vertices-in-a-graph-in-sagemath

class MyVertex(tuple):
    def __init__(self, v):
        self.vertex = v

    def __str__(self):
        return str(self.vertex[0])

#this and above are literally to deal with vertices having same labels
#vertices are actually labeled by tuples (weight, index of vertex) then the latter is forgotten when displaying

def plot_graph(G):
    E = [(MyVertex(a), MyVertex(b)) for (a, b) in G.edges(labels=False)]
    return Graph(E, multiedges = True, loops = True).plot()

#####################################################################################

#INITIALIZATION

#####################################################################################

def base_graph(g,n):
    return Graph({(g,0): list(range(-1,-n-1,-1))})

def m2(): #outputs the set of graphs for M2,0 -- labels are (weight, index)
    L = [Graph({(2,0): []}),
    Graph({(1,0): [(1,0)]}),
    Graph({(1,0): [(1,1)]}), #these formats are good for illustrating how to implement pinch (loop)/splits
    Graph({(0,0): [(0,0),(1,1)], (1,1): []}),
    Graph({(0,0): [(0,0),(0,0)]}), #multiedges (even LOOPS) works!
    Graph({(0,0): [(0,0),(0,1)], (0,1): [(0,1)]}),
    Graph({(0,0): [(0,1),(0,1),(0,1)], (0,1): []})]
    return L

#####################################################################################

#STABILITY TESTING

#####################################################################################

def local_check(G,v): #no need to worry about marked points here
    weight = v[0]
    if weight >= 2:
        return True
    elif weight == 1 and G.degree(v) >= 1:
        return True
    elif weight == 0 and G.degree(v) >= 3:
        return True
    else:
        return False


def stability_check(G):
    for v in G.vertices():
        if local_check(G,v) == False:
            return False
    return True


#e.g. take G = Graph({(0,0): [(0,1),(0,1),(0,1)], (0,1): [], (0,3): []})
# stability_check(G) returns False
# removing the (0,3) returns True
# more test cases eventually, later, but seems simplistic and fine

#####################################################################################

# LOOP/SPLIT

#####################################################################################

def loop(G,v): #turn a vertex of weight g into weight g-1 with a self-loop
    













#####################################################################################

# GENUS GENERATION

#####################################################################################


#using homology and weight, we can just generate all graphs of particular genus (marked pts later..)

#todo











#create loop function (input G and vertex)

#tear function (output all possible, requires considering partitions?)


#check automorphism of two graphs function (particularly labeleed graphs, try "universal vertex" idea)
#https://groups.google.com/g/sage-devel/c/H1GkN9urIfQ